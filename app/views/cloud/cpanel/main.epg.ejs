
<style>
  .body{

background-color: black;
margin: 0px;
padding: 0px;

  }

.icontainer {
width: 100%;
height: 60vh;

overflow: hidden;
overflow-y: auto;

position: relative;
border-radius: 3px;

}


.icontainer ol {
margin: 0;
gap: 1rem;
padding: 0;
display: flex;
list-style: none;

flex-direction: column;
counter-reset: my-counter;
}
.icontainer ol li {
width: 40rem;

color: #fff;
border-radius: 3px;
background: rgba(94, 89, 89, 0.7);
counter-increment: my-counter;
padding: 1.1rem 1.5rem 1.1rem 1.5rem;
}
.icontainer ol li::before {
content: counter(my-counter) ". ";
}


.sx{
color: #8ff98f;
background: rgba(37, 69, 49, 0.7);

}
</style>

<!-- partial:index.partial.html -->
<div id="epglist" class="icontainer">
<ol id='lepg'>
  <li>Parentheses</li>
  <li>Exponents</li>
  <li>Multiplication</li>
</ol>
</div>


<script>
const  ixiplay = {
          nflag: false,
          cflag:false,
          pflag: false,
          nBolt: 0,
          
          engine: function (cdata){
          //this  = {...data};
          //      console.log(ldata.data);
          //const {status, message , channel , schedule, data} = cdata;
          this.CDATA =cdata;
          this.VASSETS= this.CDATA.schedule.list;
          console.log(this.VASSETS);
          
           const f1 = `<div  id="plist">
              <article id='vlist' >
                <h1>Program list for ${this.CDATA.channel.channel_name}</h1>
                <dl id='lchild'>
                
                  </dl>
                  </article> </div>`;
          
            if (engx )$('#plisted').html(f1);
          
          
            var lastCT=0; 
          this.VASSETS.forEach(vasset => {
          
           if( vasset.epg.start=== null){
            vasset.epg.start = lastCT;
          
           vasset.epg.end = lastCT +  vasset.epg.duration ;
          
           }
          
            
          timex ="";
          // vasset.index+": "+imedia.secondsToClockM(vasset.epg.start) +" - "+imedia.secondsToClockM(vasset.epg.end) + '  |' + imedia.secondsToClockM(vasset.epg.duration) ;
          
                  const f2 =` <div class="list">
                    <dt>${timex}</dt>
                    <dd>${vasset.video_title}</dd>
                  </div>`;
          
                  if (engx)   $('#lchild').append(f2);
          
                  lastCT = vasset.epg.end;
          
          });
          
          play.init();
          
          
          },
          now: function(){
          
            play.init();
            player.unMute();
            
          }
          ,
          update: function (){
          VASSETS = this.VASSETS;
          
          const { serverZTime ,sessionCount,  serverTime, stationDurationTime, stationStartTime} = this.CDATA.channel;
          
          
           const sessionTime = this.padClock + this.CDATA.channel.sessionTime;
          
          iTime = serverZTime ;
          
          
          loadUp= 0;
          xfound = 0;
          //var nIndex = this.nIndex;
          var nIndex = 0;
          var nOffSet = 0;
          isAGO = false;
          var lmxx ="";
          
          VASSETS.forEach((program,i)=>{
          //timex = imedia.secondsToClockM(program.epg.start) +" - "+imedia.secondsToClockM(program.epg.end) + '  |' + imedia.secondsToClockM(program.epg.duration) ;
          
          timex = imedia.secondsToClockM(program.epg.start) +" - "+imedia.secondsToClockM(program.epg.end);
          
          if(loadUp + program.duration > sessionTime  && xfound === 0){
            isAGO = true;
          // last list here before this
          className ="";
          xfound =1;
          nIndex =i;
          nOffSet =  ( sessionTime  - loadUp );
          Video_ID = program.video_id;
          //console.log(program);
          //$('#show2').html(program.program_name);
          
          console.log (">>"+ loadUp, imedia.secondsToClock(loadUp)+"|"+imedia.secondsToClock(sessionTime));
          
          //console.log ("D:" +program.duration+":"+imedia.secondsToClock(program.duration) + "index ="+nIndex ,"offset="+  nOffSet+" | "+imedia.secondsToClock(nOffSet));
          lmxx= "D:" +program.duration+":"+imedia.secondsToClock(program.duration) + "index ="+nIndex ,"offset="+  nOffSet+" | "+imedia.secondsToClock(nOffSet);
          
          //play.at({video_id: program.video_id, nIndex, nOffSet});
          
          
          $("#lepg").append(`<span class='sx'><li ${className}   > ${timex} :: ${program.video_title}</li> </span>`);
          
          }
          
          else {
            
            //console.log (loadUp, imedia.secondsToClock(loadUp));
          
          if(isAGO) $("#lepg").append(`<li ${className}>${timex} :: ${program.video_title}</li>`);
          }
           //imessage = ` Scount = ${sessionCount}, loadUp = ${loadUp}, STime = ${sessionTime} :${imedia.secondsToClock(sessionTime)} , ServerZTime = ${serverZTime} : ${imedia.secondsToClock(serverZTime)}, serverTime= ${serverTime}, stationDurationTime = ${stationDurationTime}, stationStartTime = ${stationStartTime}`
          
           imessage = ` SsT = ${sessionTime} :${imedia.secondsToClock(sessionTime)} `; 
           //`ServerZTime = ${serverZTime} : ${imedia.secondsToClock(serverZTime)}, serverTime= ${serverTime}, stationDurationTime = ${stationDurationTime}, stationStartTime = ${stationStartTime}`
          
          
          
          //$('#show1').html(imessage+"  "+lmxx);
          
          
          loadUp += program.duration;
          
          
          })
          
          
          }
          
          ,
          init: function (){
            
          
          VASSETS = this.VASSETS;
          
          const { serverZTime ,sessionCount,  serverTime, stationDurationTime, stationStartTime} = this.CDATA.channel;
          
          
          const sessionTime = padClock + this.CDATA.channel.sessionTime;
          
          iTime = serverZTime ;
          
          
          isAsset= true;
          loadUp= 0;
          xfound =0;
          var nIndex =0;
          var nOffSet = 0;
          VASSETS.forEach((program,i)=>{
          
          
            if(loadUp + program.duration > sessionTime  && xfound === 0){
          xfound =1;
          nIndex =i;
          nOffSet =  ( sessionTime  - loadUp );
          Video_ID = program.video_id;
          vplayer.duration = program.duration;
          console.log(program);
          $('#show2').html(program.program_name);
          
          //console.log (">>"+ loadUp, imedia.secondsToClock(loadUp)+"|"+imedia.secondsToClock(sessionTime));
            
          //console.log ("D:" +program.duration+":"+imedia.secondsToClock(program.duration) + "index ="+nIndex ,"offset="+  nOffSet+" | "+imedia.secondsToClock(nOffSet));
          
          play.at({video_id: program.video_id, nIndex, nOffSet});
          
          }
          
           // else console.log (loadUp, imedia.secondsToClock(loadUp));
          
          
          var  imessage = "";
          //` Scount = ${sessionCount}, loadUp = ${loadUp}, STime = ${sessionTime} :${imedia.secondsToClock(sessionTime)} , ServerZTime = ${serverZTime} : ${imedia.secondsToClock(serverZTime)}, serverTime= ${serverTime}, stationDurationTime = ${stationDurationTime}, stationStartTime = ${stationStartTime}`
          
          
          $('#show1').html(imessage);
          
          
          loadUp += program.duration;
          
          
          })
          
          
          
          }
          
          ,
          at: function (mxl){
          this.nBolt=0;
          var {video_id, nOffSet, nIndex } = mxl; 
          
          play.pflag= true;
           play.pload  = mxl; 
          //this.nIndex= nIndex;
          if (nOffSet === null) nOffSet = 0;
          vplayer.currentTime= nOffSet;
          // duration:0
          //console.log("of set at time in Seconds ",nOffSet);
            //videocode =  "&autoplay=1&volume=1&mute=0&controls=0&disablekb=1&title=0&share=0&open_playlist=0&random=0&autohide=1&enablejsapi=1" 
          
          videocode =  "&mute=0&controls=0&disablekb=1&title=0&share=0&open_playlist=0&origin=https://onetv.ng&autohide=1&enablejsapi=1";
            
          
           if (toMute) videocode =  "&mute=1&controls=0&disablekb=1&title=0&share=0&open_playlist=0&origin=https://onetv.ng&autohide=1&enablejsapi=1";
            
           //videosrc =   videosrc + videocode;
           
          //alert(' let dPlayer = document.getElementById("player");');player.loadVideoByUrl(videosrc);
          //videocode =  "?autoplay=1&volume=1&mute=1&controls=0&disablekb=1&title=0&share=0&open_playlist=0&random=0&autohide=1&enablejsapi=1&t="+nOffSet+"s";
           
          console.log(mxl);
          
          
          this.pload = mxl;
          this.pflag= true;
          
          
          var doPlay = "https://www.youtube.com/embed/"+video_id+"?t="+nOffSet+"s&autoplay=1"+videocode;
          //var doPlay = "https://www.youtube.com/embed/"+video_id+"?enablejsapi=1&t="+nOffSet+"&autoplay=1";
            
          //console.log("---------playing code----------->>>",doPlay);
          
            
          },
          clock: function (){
                                                                //===================CLOCK=============
           // isPlayer = true;
              
            
          
            if (!playReady) {
              
              console.log('error save ');
          
              
             // return 
            }
          
          
          //if (!playReady) return;
          
          if(play.pflag){
          play.pflag= false;
          
          
          const {video_id, nOffSet, nIndex } = play.pload ; 
          this.nIndex= nIndex;
          
         // console.log(player);
          
          
          
          if (typeof player  != 'undefined' &&  !isVplayer){
          
          player.loadVideoById(video_id, nOffSet);
          //play.update();
          
          
          } else{
          
          play.update();
          
          }
          
          }
          
          var duration = 0;
          var   pT;
          var lT;
          //const duration = this.VASSETS[this.nIndex].duration;
          if (playReady){
          
          
            if(!isVplayer){
            pT= player.getCurrentTime();
            lT= Math.round(player.getDuration() - player.getCurrentTime());
          } else {
          
            if(typeof this.VASSETS !== 'undefined') {

         // console.log("--------this is -------VASSETS=========>>", this.VASSETS);
            pT = vplayer.currentTime++;
          // vplayer.duration   =  Math.round(this.VASSETS[this.nIndex].duration ); //:0 ;
          }

           lT = vplayer.duration;

          }
          
          }
          
          
          
          if(lT < 3 && nBolt > 10){ 
          
            nBolt=0;
          
          console.log("out Lt ===>"+lT ,"out nBolt ===>"+nBolt );
            if (this.VASSETS.length > this.nIndex +1){
          
          this.nIndex++;
          
          } else {
          
          
          this.nIndex = 0;
          
          
          }
          vasset = this.VASSETS[this.nIndex];
          vplayer.duration = vasset.duration;
          play.nflag = false;
          play.cflag = false;
          
          //play.init();
          //play.at({video_id: vasset.video_id, nIndex: this.nIndex, nOffSet:0});
          
           //player.loadVideoById(vasset.video_id);//=============
          //player.loadVideoByUrl(`https://www.youtube.com/watch?v=${video_id}&autoplay=1&mute=1&t=${nOffSet}`);
          
          //player.loadVideoByUrl(`https://www.youtube.com/watch?v=4yD2RxaQm6M&t=16s`);
          
          //player.playVideo();//==========
          
          
          
          
          } else {
          
            if(mandy ++ > 10) {
              
             // console.log("Lt ===>"+lT ,"nBolt ===>"+nBolt ); 
          
          mandy = 0;
          
          }
          
          
          }
          
          
          
          
          
          
          
          this.nBolt++;
          this.padClock = padClock ++;
          
          $("#showclock").html(padClock);
          $("#info").html(padClock);
          
          }
          
          }
          



  var        isAsset= false;
  var  imessage ;
const isVplayer= true;
const vplayer = {currentTime:0, duration:0,
get playLetTime (){

return this.vduration - this.vcurrentTime

}

};

  var playReady = false;
  var sessionPad =0;
  var isSession=false;
  var showTime="ii";
  var engx  = false;
  var  sessionTime =0;
  var  vsessionTime =0;
  var  vduration =0;
  var  vcurrentTime =0;
  var  vstationStartTime =0;
  var  vstationDurationTime =0;
  var padClock =0;
  var nBolt ;
  var mandy;
  //var sessionTime;

VBASESERVER  = 'https://imediaport.com:4646';

const TV_URL = VBASESERVER + "/api/play/" +channel_id;

const  play = {
nflag: false,
cflag:false,
pflag: false,
nIndex:0,

engine: function (cdata){
  $("#lepg").html("");
//this  = {...data};
console.log("<====xxx============  | ======x1 0 1x====== | ============xx========>");

//      console.log(ldata.data);
//const {status, message , channel , schedule, data} = cdata;
this.CDATA =cdata;
this.VASSETS= this.CDATA.schedule.list;
console.log(this.VASSETS);

const f1 = `<div  id="plist">
  <article id='vlist' >
    <h1>Program list for ${this.CDATA.channel.channel_name}</h1>
    <dl id='lchild'>
    
      </dl>
      </article> </div>`;

if (engx )$('#plisted').html(f1);


var lastCT=0; 
$("#lepg").html("");


var isAGO= false;
this.VASSETS.forEach((vasset,i )=> {
  className= "";
if( vasset.epg.start=== null){
vasset.epg.start = lastCT;

vasset.epg.end = lastCT +  vasset.epg.duration ;

}



timex = imedia.secondsToClockM(vasset.epg.start) +" - "+imedia.secondsToClockM(vasset.epg.end) + '  |' + imedia.secondsToClockM(vasset.epg.duration) ;

      const f2 =` <div class="list">
        <dt>${timex}</dt>
        <dd>${vasset.video_title}</dd>
      </div>`;

     // $("#lepg").append(`<li ${className}>${timex} :: ${vasset.video_title}</li>`);
    //var  f3=`<li>${timex} : ${vasset.video_title}</li>`;

   // $("#lepg").append(f3);
   // $("#epglist").append("<b>Appended text</b>");

      lastCT = vasset.epg.end;

});

play.init();


},
now: function(){

play.init();
player.unMute();

}
,
xxupdate: function (){
  $("#lepg").html("");
  cdata = this.CDATA ;
this.VASSETS= this.CDATA.schedule.list;
console.log(this.VASSETS);

const f1 = `<div  id="plist">
  <article id='vlist' >
    <h1>Program list for ${this.CDATA.channel.channel_name}</h1>
    <dl id='lchild'>
    
      </dl>
      </article> </div>`;

if (engx )$('#plisted').html(f1);


var lastCT=0; 
$("#lepg").html("");


var isAGO= false;
this.VASSETS.forEach((vasset,i )=> {
  className= "";
if( vasset.epg.start=== null){
vasset.epg.start = lastCT;

vasset.epg.end = lastCT +  vasset.epg.duration ;

}



timex = imedia.secondsToClockM(vasset.epg.start) +" - "+imedia.secondsToClockM(vasset.epg.end) + '  |' + imedia.secondsToClockM(vasset.epg.duration) ;

      const f2 =` <div class="list">
        <dt>${timex}</dt>
        <dd>${vasset.video_title}</dd>
      </div>`;

     // $("#lepg").append(`<li ${className}>${timex} :: ${vasset.video_title}</li>`);
    //var  f3=`<li>${timex} : ${vasset.video_title}</li>`;

   // $("#lepg").append(f3);
   // $("#epglist").append("<b>Appended text</b>");

      lastCT = vasset.epg.end;

});

play.init();


},


init: function (){
VASSETS = this.VASSETS;

const { serverZTime ,sessionCount,  serverTime, stationDurationTime, stationStartTime} = this.CDATA.channel;


 sessionTime =sessionPad + padClock + this.CDATA.channel.sessionTime;

iTime = serverZTime ;
isSession = true;


loadUp= 0;
xfound = 0;
var nIndex =0;
var nOffSet = 0;
isAGO = false;
var lmxx ="";
VASSETS.forEach((program,i)=>{
//timex = imedia.secondsToClockM(program.epg.start) +" - "+imedia.secondsToClockM(program.epg.end) + '  |' + imedia.secondsToClockM(program.epg.duration) ;

timex = imedia.secondsToClockM(program.epg.start) +" - "+imedia.secondsToClockM(program.epg.end);

if(loadUp + program.duration > sessionTime  && xfound === 0){
  isAGO = true;
// last list here before this
className ="";
xfound =1;
this.nIndex=nIndex =i;
this.vcurrentTime = vcurrentTime = nOffSet =  ( sessionTime  - loadUp );
Video_ID = program.video_id;
  vduration = program.duration;
//var  vcurrentTime =0;
//console.log(program);
//$('#show2').html(program.program_name);

console.log (">>"+ loadUp, imedia.secondsToClock(loadUp)+"|"+imedia.secondsToClock(sessionTime));

console.log ("D:" +program.duration+":"+imedia.secondsToClock(program.duration) + "index ="+nIndex ,"offset="+  nOffSet+" | "+imedia.secondsToClock(nOffSet));
lmxx= "D:" +program.duration+":"+imedia.secondsToClock(program.duration) + "index ="+nIndex ,"offset="+  nOffSet+" | "+imedia.secondsToClock(nOffSet);

//play.at({video_id: program.video_id, nIndex, nOffSet});


$("#lepg").append(`<span class='sx'><li ${className}   > ${timex} :: ${program.video_title}</li> </span>`);

}

else {
  
  //console.log (loadUp, imedia.secondsToClock(loadUp));

if(isAGO) $("#lepg").append(`<li ${className}>${timex} :: ${program.video_title}</li>`);
}
 //imessage = ` Scount = ${sessionCount}, loadUp = ${loadUp}, STime = ${sessionTime} :${imedia.secondsToClock(sessionTime)} , ServerZTime = ${serverZTime} : ${imedia.secondsToClock(serverZTime)}, serverTime= ${serverTime}, stationDurationTime = ${stationDurationTime}, stationStartTime = ${stationStartTime}`

 imessage = ` SsT = ${sessionTime} :${imedia.secondsToClock(sessionTime)} `; 
 //`ServerZTime = ${serverZTime} : ${imedia.secondsToClock(serverZTime)}, serverTime= ${serverTime}, stationDurationTime = ${stationDurationTime}, stationStartTime = ${stationStartTime}`



//$('#show1').html(imessage+"  "+lmxx);


loadUp += program.duration;


})


}

,
update: function (){

  console.log("we are moving",vsessionTime)
  $("#lepg").html("");
VASSETS = this.VASSETS;

const { serverZTime ,sessionCount,  serverTime, stationDurationTime, stationStartTime} = this.CDATA.channel;


 //const sessionTime = this.padClock + this.CDATA.channel.sessionTime;

const  sessionTime = vsessionTime;
iTime = serverZTime ;


loadUp= 0;
xfound = 0;
var nIndex = this.nIndex;
//nIndex = 0;
var nOffSet = 0;
isAGO = false;
var lmxx ="";

VASSETS.forEach((program,i)=>{
//timex = imedia.secondsToClockM(program.epg.start) +" - "+imedia.secondsToClockM(program.epg.end) + '  |' + imedia.secondsToClockM(program.epg.duration) ;

timex = imedia.secondsToClockM(program.epg.start) +" - "+imedia.secondsToClockM(program.epg.end);

if(loadUp + program.duration > sessionTime  && xfound === 0){
  isAGO = true;
// last list here before this
className ="";
xfound =1;
nIndex =i;
nOffSet =  ( sessionTime  - loadUp );
Video_ID = program.video_id;
//console.log(program);
//$('#show2').html(program.program_name);

console.log (">>"+ loadUp, imedia.secondsToClock(loadUp)+"|"+imedia.secondsToClock(sessionTime));

//console.log ("D:" +program.duration+":"+imedia.secondsToClock(program.duration) + "index ="+nIndex ,"offset="+  nOffSet+" | "+imedia.secondsToClock(nOffSet));
lmxx= "D:" +program.duration+":"+imedia.secondsToClock(program.duration) + "index ="+nIndex ,"offset="+  nOffSet+" | "+imedia.secondsToClock(nOffSet);

//play.at({video_id: program.video_id, nIndex, nOffSet});


$("#lepg").append(`<span class='sx'><li ${className}   > ${timex} :: ${program.video_title}</li> </span>`);

}

else {
  
  //console.log (loadUp, imedia.secondsToClock(loadUp));

if(isAGO) $("#lepg").append(`<li ${className}>${timex} :: ${program.video_title}</li>`);
}
 //imessage = ` Scount = ${sessionCount}, loadUp = ${loadUp}, STime = ${sessionTime} :${imedia.secondsToClock(sessionTime)} , ServerZTime = ${serverZTime} : ${imedia.secondsToClock(serverZTime)}, serverTime= ${serverTime}, stationDurationTime = ${stationDurationTime}, stationStartTime = ${stationStartTime}`

 imessage = ` SsT = ${sessionTime} :${imedia.secondsToClock(sessionTime)} `; 
 //`ServerZTime = ${serverZTime} : ${imedia.secondsToClock(serverZTime)}, serverTime= ${serverTime}, stationDurationTime = ${stationDurationTime}, stationStartTime = ${stationStartTime}`



//$('#show1').html(imessage+"  "+lmxx);


loadUp += program.duration;


})


}

,
at: function (mxl){
const {video_id, nOffSet, nIndex } = mxl; 
//console.log(player);
showTime = "000";
this.pload = mxl;
this.pflag= true;

//player.cueVideoById(video_id, nOffSet);
//player.playVideo();

},
clock: function (){
nIndex =this.nIndex;
  showTime = iClock;

  if(isSession){
    vsessionTime = padClock + sessionTime;
} 

  $("#showclock").html(showTime);

//if (!playReady) return


if(play.pflag){
const {video_id, nOffSet, nIndex } = play.pload ; 
this.nIndex= nIndex;

play.pflag= false;

}

//var duration = 0;
 pT= vcurrentTime;
 lT = vduration - vcurrentTime;

if(     isAsset){

if(lT <1 ){ 

if (this.VASSETS.length > this.nIndex +1){
  nIndex = this.nIndex ++;

  

  //vduration =
 vcurrentTime = 0;
  console.log("total Index ="+this.VASSETS.length, "current Index ="+(this.nIndex +1));
   
} else {

console.log("total  reset to looped zero ===================...");

this.nIndex = 0;

}

vasset = this.VASSETS[this.nIndex];
vduration =vasset.duration;
if(vcurrentTime === 0)play.update();
play.nflag = false;
play.cflag = false;


}
}

this.padClock = padClock++;
this.vcurrentTime = vcurrentTime++;

//play.init();

$("#showclock").html(  sessionTime+" | "+padClock+" | "+imessage );


//--------$("#info").html(this.nIndex+"  "+this.padClock);

//$("#navClock").html( vsessionTime);

//--------$("#clockinfo").html( ">"+lT);

}


}




 TTV_URL = VBASESERVER + "/api/play/" +channel_id;

console.log("===TTV Load to find=========>>>", TTV_URL);

const mxu =axios(TTV_URL).then((ldata) => {
 // $("#info").html("test data");
 console.log(ldata.data);

//$("#lepg").html("");
const {status, message , channel , schedule, data } = ldata.data;

//$("#lepg").html("--01",message);


if(status){

  //console.log("<================  | ======101====== | ====================>");

play.engine(ldata.data);
//$("#info").html("data done");
//$("#lepg").html("--ggggg----");
console.log('STATUS ====data done=========>',status);

playReady = true;

setInterval( play.clock, 1000);

//$("#info").html("after data done");
//$("#lepg").html("--ggggg----");
console.log('STATUS ==== after data done=========>',status);


};

  });

var iClock=0;


function playclock(){

play.clock();

  //$("#showclock").html(this.nIndex+"  "+showTime);
 // $("clockinfo").html( iClock);
 //$("#navClock").html( iClock++);

}


setInterval( playclock, 1000);
$("#info").html("");

//$("#navClock").html( vsessionTime);

$("#clockinfo").html( "");
  //infox
</script>